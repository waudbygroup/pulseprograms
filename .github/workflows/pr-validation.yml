name: PR Validation

on:
  pull_request:
    paths:
      - 'sequences/**'
      - 'schemas/**'

permissions:
  contents: read
  pull-requests: write

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml jsonschema requests

    - name: Run PR validation
      env:
        PR_AUTHOR: ${{ github.event.pull_request.user.login }}
        PR_AUTHOR_EMAIL: ${{ github.event.pull_request.user.email }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        python .github/scripts/pr_validator.py

    - name: Post PR comment
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read the generated comment
          const comment = fs.readFileSync('pr_comment.md', 'utf8');
          
          // Get existing comments
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          // Look for existing validation comment
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('üîç PR Validation Results')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }